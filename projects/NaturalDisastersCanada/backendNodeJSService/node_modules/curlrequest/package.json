{
  "name": "curlrequest",
  "description": "A curl wrapper for node",
  "version": "0.3.9",
  "homepage": "https://github.com/chriso/curlrequest",
  "author": {
    "name": "Chris O'Hara",
    "email": "cohara87@gmail.com"
  },
  "main": "index",
  "repository": {
    "type": "git",
    "url": "http://github.com/chriso/curlrequest.git"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/chriso/curlrequest/raw/master/LICENSE"
    }
  ],
  "readme": "**curlrequest** is a node wrapper for the command line **curl(1)**\n\n```bash\n$ npm install curlrequest\n```\n\n## Why?\n\nCurl has significantly more features than any of the node.js request\nlibraries. A lot of the logic that you would build on top of a node.js\nrequest library (rate limiting, URL globbing, uploading/downloading\nfile, better proxy support) already exists in curl\n\n- Curl is mature, stable, and fast\n- Separate requests/processes take advantage of all CPUs\n- Spawning processes is relatively cheap and non-blocking\n- Better control over connect, request, and retry timeouts. If a request has hung just kill the process\n\nNote: don't use this if you need to stream the response - use\n[mikeal/request](https://github.com/mikeal/request) instead\n\n## Usage\n\nMake a request with curl - callback receives `(err, stdout)` on request\ncompletion\n\n```javascript\ncurl.request(options, callback);\n```\n\nNote that you can also call `curl.request(url, callback)` which is\nshorthand for `curl.request({ url: url }, callback)`.\n\nTo setup default options and return a function that can be used later\n\n```javascript\nvar request = curl.request(default_options);\n\nrequest([options ,] callback);\n```\n\n## Options\n\n`url`\n\nThe request url.\n\n`method` - *default: GET*\n\nThe request method.\n\n`encoding` - *default: utf8*\n\nEncode the response body as either `utf` or `ascii`. Set to `null` return a\nbuffer.\n\n`headers` - *default: {}*\n\nSet request headers, e.g. `headers: { accept: 'text/*' }`\n\n`data` - *default: false*\n\nAn object containing data to urlencode and then POST.\n\n`useragent` - *default: <random>*\n\nSet the request user-agent.\n\n`location` - *default: true*\n\nWhether to follow 30x redirects or not.\n\n`redirects` - *default: 3*\n\nThe maximum amount of redirects to follow before failing with error \"retries\".\n\n`retries` - *default: 0*\n\nHow many times to retry the request in the case of failure.\n\n`timeout` - *default: false*\n\nThe maximum amount of seconds the request can take before failing with\nerror \"timeout\".\n\n`scope` - *default: {}*\n\nThe scope to call the callback in.\n\n`require` - *default: null*\n\nPass a string or regular expression to search for in the response body. If\nthere's no match, fail the request with \"required string not found\". You\ncan also pass an array of strings / regexps to search for where only one\nhas to match.\n\n`require_not`\n\nThe inverse of `require` - fail if the response contains a string.\n\n`process` - *default: false*\n\nPass in a function which modifies the response body before sending it to\nthe callback. Useful if you need to modify the response in some way before\na higher level library has the chance to modify it.\n\n`file` - *default: false*\n\nOpen a file and process it like a request response, useful if using\ntemporary files.\n\n`stderr` - *default: false*\n\nPipe the stderr of each curl process to the main process. Set this to a\nstring to write stderr to a file.\n\n`pretend` - *default: false*\n\nUseful if you want to see what curl command is to be executed without actually\nmaking the request\n\n```javascript\ncurl.request({ url: 'http://google.com', pretend: true }, function (err, stdout, meta) {\n    console.log('%s %s', meta.cmd, meta.args.join(' '));\n});\n```\n\n### Passing options directly to curl\n\nAny additional options are sent as command line options to curl. See `man\ncurl` or `curl --manual` for a detailed description of options and usage.\n\n**Example 1**. Include response headers in the output\n\n```javascript\nvar options = { url: 'google.com', include: true };\n\ncurl.request(options, function (err, parts) {\n    parts = parts.split('\\r\\n');\n    var data = parts.pop()\n      , head = parts.pop();\n});\n```\n\n**Example 2**. Limit the download speed of a transfer\n\n```javascript\nvar options = {\n    url: 'example.com/some/large/file.zip'\n  , 'limit-rate': '500k'\n  , encoding: null\n};\n\ncurl.request(options, function (err, file) {\n    //file is a Buffer\n});\n```\n\n**Example 3**. See what's going on under the hood\n\n```javascript\nvar options = {\n    url: 'google.com'\n  , verbose: true\n  , stderr: true\n};\n\ncurl.request(options, function (err, data) {\n    //..\n});\n```\n\n## License\n\nCopyright (c) 2012 Chris O'Hara <cohara87@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n",
  "readmeFilename": "README.md",
  "_id": "curlrequest@0.3.9",
  "dist": {
    "shasum": "7377d9441327139c2732561371744d29a9eb0bcc"
  },
  "_from": "curlrequest@",
  "_resolved": "https://registry.npmjs.org/curlrequest/-/curlrequest-0.3.9.tgz"
}
